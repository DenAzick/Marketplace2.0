@page "/UpdateUser"
@using Blazored.LocalStorage
@using Marketplace.Blazor.Models.Account
@inject HttpClient Http
@inject ILocalStorageService Storage
@inject NavigationManager NavManager
@using Marketplace.Blazor.Managers
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text

<h3 class="text-center text-primary">Update User</h3>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm border-primary">
                <div class="card-body p-4">
                    <h5 class="card-title text-center text-primary">Update Account</h5>
                    <form>
                        <div class="mb-3">
                            <input @bind="_userModel.Name" class="form-control form-control-lg bg-light text-dark" id="name" type="text" placeholder="Name" />
                        </div>
                        <div class="mb-3">
                            <input @bind="_userModel.Password" class="form-control form-control-lg bg-light text-dark" id="Password" type="password" placeholder="New Password" />
                        </div>
                        <div class="mb-3">
                            <input @bind="_userModel.ConfirmPassword" class="form-control form-control-lg bg-light text-dark" id="confirmPassword" type="password" placeholder="Confirm New Password" />
                        </div>
                        <div class="mb-3">
                            <input @bind="_userModel.UserName" class="form-control form-control-lg bg-light text-dark" id="username" type="text" placeholder="Username" />
                        </div>
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary btn-lg" type="button" @onclick="UpdateUser">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .text-primary {
        color: #007bff;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0069d9;
            border-color: #0062cc;
        }

    .bg-light {
        background-color: #f8f9fa;
    }

    .text-dark {
        color: #343a40;
    }

    .border-primary {
        border-color: #007bff;
    }

    .card {
        max-width: 450px;
    }

    .mb-3:not(:last-child) {
        margin-bottom: 1rem;
    }
</style>

@code {

    private UpdateUserModel _userModel = new UpdateUserModel();

    protected override async Task OnInitializedAsync()
    {
        var token = await Storage.GetItemAsStringAsync("token");
        var request = new HttpRequestMessage(HttpMethod.Get, "/account/profile");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            // Parse the response content and update the _userModel properties accordingly
            var content = await response.Content.ReadAsStringAsync();
            _userModel = JsonSerializer.Deserialize<UpdateUserModel>(content);
        }
        else
        {
            // Handle the error case when the profile retrieval fails
            // You can display an error message or redirect to an error page
            // For example:
            NavManager.NavigateTo("/error");
        }
    }

    private async Task UpdateUser()
    {
        var token = await Storage.GetItemAsStringAsync("token");
        var request = new HttpRequestMessage(HttpMethod.Put, "/Account/update");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        // Convert the _userModel to JSON string and set it as the request content
        var json = JsonSerializer.Serialize(_userModel);
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/profile");
        }
        else
        {
            // Handle the error case when the update fails
            // You can display an error message or redirect to an error page
            // For example:
            NavManager.NavigateTo("/error");
        }
    }
}
